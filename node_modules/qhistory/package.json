{
  "_args": [
    [
      {
        "raw": "qhistory",
        "scope": null,
        "escapedName": "qhistory",
        "name": "qhistory",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/mastermold/Desktop/nodar-client"
    ]
  ],
  "_from": "qhistory@latest",
  "_id": "qhistory@1.0.0",
  "_inCache": true,
  "_location": "/qhistory",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/qhistory-1.0.0.tgz_1486794596400_0.03285856428556144"
  },
  "_npmUser": {
    "name": "pshrmn",
    "email": "paul.sherman.88@gmail.com"
  },
  "_npmVersion": "3.8.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "qhistory",
    "scope": null,
    "escapedName": "qhistory",
    "name": "qhistory",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/qhistory/-/qhistory-1.0.0.tgz",
  "_shasum": "3899ec603089ca53699e9f1e0bade5df6cd6da86",
  "_shrinkwrap": null,
  "_spec": "qhistory",
  "_where": "/Users/mastermold/Desktop/nodar-client",
  "author": {
    "name": "Paul Sherman"
  },
  "bugs": {
    "url": "https://github.com/pshrmn/qhistory/issues"
  },
  "dependencies": {
    "invariant": "^2.2.2"
  },
  "description": "Wrap history with query support",
  "devDependencies": {
    "babel-cli": "^6.22.2",
    "babel-core": "^6.22.1",
    "babel-jest": "^18.0.0",
    "babel-loader": "^6.2.10",
    "babel-plugin-transform-export-extensions": "^6.22.0",
    "babel-plugin-transform-object-rest-spread": "^6.22.0",
    "babel-preset-es2015": "^6.22.0",
    "cross-env": "^3.1.4",
    "history": "^4.5.1",
    "jest": "^18.1.0",
    "qs": "^6.3.0",
    "rimraf": "^2.5.4",
    "webpack": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "3899ec603089ca53699e9f1e0bade5df6cd6da86",
    "tarball": "https://registry.npmjs.org/qhistory/-/qhistory-1.0.0.tgz"
  },
  "files": [
    "lib",
    "umd",
    "es",
    "LICENSE",
    "*.md"
  ],
  "gitHead": "491752576857b121c5f0cccbeb4b85b522e565d5",
  "homepage": "https://github.com/pshrmn/qhistory#readme",
  "keywords": [
    "history",
    "query",
    "search"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "pshrmn",
      "email": "paul.sherman.88@gmail.com"
    }
  ],
  "module": "es/index.js",
  "name": "qhistory",
  "optionalDependencies": {},
  "peerDependencies": {
    "history": ">=4.0.0"
  },
  "readme": "# Q History\r\n\r\nAdd query object support to [`history`](https://github.com/ReactTraining/history) library location objects.\r\n\r\nYou will need to supply `stringify` and `parse` methods. \r\n\r\n#### `stringify`\r\n\r\nA function that takes a query object and returns a search string.\r\n\r\n```js\r\nstringify({ occupation: 'computer' }) // 'occupation=computer'\r\n```\r\n\r\n#### `parse`\r\n\r\nA function that takes a search string and returns a query object.\r\n\r\n```js\r\nparse('stopDownloading=true') // { stopDownloading: 'true' }\r\n```\r\n\r\nThere are lots of different query string packages that you can choose from. Some popular ones include:\r\n\r\n* [`qs`](https://www.npmjs.com/package/qs)\r\n* [`query-string`](https://www.npmjs.com/package/query-string)\r\n* [`querystring`](https://www.npmjs.com/package/querystring)\r\n\r\nThere may be subtle differences in the way that each parses and stringifies, so you will need to determine which supports the features that you want.\r\n\r\n### Installation\r\n\r\n```\r\nnpm install --save qhistory\r\n```\r\n\r\n### Usage\r\n\r\n```js\r\nimport { createBrowserHistory } from 'history'\r\nimport qhistory from 'qhistory'\r\n\r\nimport { stringify, parse } from 'qs'\r\n\r\nconst history = qhistory(\r\n  createBrowserHistory({ /* history configuration options */ }),\r\n  stringify,\r\n  parse\r\n)\r\n```\r\n\r\n#### Usage with React Router\r\n\r\nThis can be used with React Router v4 to add query string support to location objects. If a location object has both a search string and a query object, the search string's value will be overwritten by the stringified query object.\r\n\r\n```js\r\nimport { Router } from 'react-router-dom'\r\nimport { createBrowserHistory } from 'history'\r\nimport qhistory from 'qhistory'\r\n\r\nimport { stringify, parse } from 'qs'\r\n\r\nconst history = qhistory(\r\n  createBrowserHistory({ /* history configuration options */ }),\r\n  stringify,\r\n  parse\r\n)\r\n\r\nrender((\r\n  <Router history={history}>\r\n    <App />\r\n  </Router>\r\n), document.getElementById('root'))\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/pshrmn/qhistory.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:umd && npm run build:min && npm run build:es",
    "build:es": "cross-env BABEL_ENV=es babel ./src -d es",
    "build:lib": "cross-env BABEL_ENV=cjs babel ./src -d lib",
    "build:min": "webpack -p --optimize-minimize --output-filename=umd/qhistory.min.js",
    "build:umd": "webpack --define process.env.NODE_ENV=\"'production'\" --output-filename=umd/qhistory.js",
    "prebuild": "rimraf lib umd es",
    "prepublish": "npm run build",
    "test": "jest"
  },
  "version": "1.0.0"
}

{
  "_args": [
    [
      {
        "raw": "@feathersjs/transport-commons@^4.0.0",
        "scope": "@feathersjs",
        "escapedName": "@feathersjs%2ftransport-commons",
        "name": "@feathersjs/transport-commons",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/Users/mastermold/Desktop/nodar-client/node_modules/@feathersjs/primus-client"
    ]
  ],
  "_from": "@feathersjs/transport-commons@^4.0.0",
  "_hasShrinkwrap": false,
  "_id": "@feathersjs/transport-commons@4.0.0",
  "_location": "/@feathersjs/transport-commons",
  "_nodeVersion": "8.9.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/transport-commons_4.0.0_1518137780803_0.19162997560743178"
  },
  "_npmUser": {
    "name": "daffl",
    "email": "daff@neyeon.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "@feathersjs/transport-commons@^4.0.0",
    "scope": "@feathersjs",
    "escapedName": "@feathersjs%2ftransport-commons",
    "name": "@feathersjs/transport-commons",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@feathersjs/primus-client",
    "/@feathersjs/socketio-client"
  ],
  "_resolved": "https://registry.npmjs.org/@feathersjs/transport-commons/-/transport-commons-4.0.0.tgz",
  "_shasum": "794630394f538a626a69fded658abeebc7c50fd9",
  "_shrinkwrap": null,
  "_spec": "@feathersjs/transport-commons@^4.0.0",
  "_where": "/Users/mastermold/Desktop/nodar-client/node_modules/@feathersjs/primus-client",
  "author": {
    "name": "Feathers contributors",
    "email": "hello@feathersjs.com",
    "url": "https://feathersjs.com"
  },
  "bugs": {
    "url": "https://github.com/feathersjs/transport-commons/issues"
  },
  "contributors": [],
  "dependencies": {
    "@feathersjs/commons": "^1.4.0",
    "@feathersjs/errors": "^3.0.0",
    "debug": "^3.1.0",
    "lodash": "^4.17.4",
    "radix-router": "^3.0.1"
  },
  "description": "Shared functionality for websocket providers",
  "devDependencies": {
    "@feathersjs/feathers": "^3.0.0",
    "istanbul": "^1.1.0-alpha.1",
    "mocha": "^5.0.0",
    "semistandard": "^12.0.0"
  },
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "integrity": "sha512-O+kuJWpdao0Lw5Pg/65eOuMIlxu+aP9bnK9jNlxfwVdqCxw4eX3Jh8WS0WmQpfZYILk5oyhP/IUdHgSqcjaXgw==",
    "shasum": "794630394f538a626a69fded658abeebc7c50fd9",
    "tarball": "https://registry.npmjs.org/@feathersjs/transport-commons/-/transport-commons-4.0.0.tgz",
    "fileCount": 15,
    "unpackedSize": 37613
  },
  "engines": {
    "node": ">= 6"
  },
  "gitHead": "98004abcfe1a09e318c784dbc8a067519f975f85",
  "homepage": "https://github.com/feathersjs/transport-commons",
  "keywords": [
    "feathers",
    "feathers-plugin"
  ],
  "license": "MIT",
  "main": "lib/",
  "maintainers": [
    {
      "name": "corymsmith",
      "email": "cory.m.smith@gmail.com"
    },
    {
      "name": "daffl",
      "email": "daff@neyeon.com"
    },
    {
      "name": "ekryski",
      "email": "e.kryski@gmail.com"
    },
    {
      "name": "marshallswain",
      "email": "marshall@creativeideal.net"
    }
  ],
  "name": "@feathersjs/transport-commons",
  "optionalDependencies": {},
  "readme": "# @feathersjs/transport-commons\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/feathersjs/transport-commons.svg)](https://greenkeeper.io/)\n\n[![Build Status](https://travis-ci.org/feathersjs/transport-commons.png?branch=master)](https://travis-ci.org/feathersjs/transport-commons)\n[![Test Coverage](https://codeclimate.com/github/feathersjs/transport-commons/badges/coverage.svg)](https://codeclimate.com/github/feathersjs/transport-commons/coverage)\n[![Dependency Status](https://img.shields.io/david/feathersjs/transport-commons.svg?style=flat-square)](https://david-dm.org/feathersjs/transport-commons)\n[![Download Status](https://img.shields.io/npm/dm/@feathersjs/transport-commons.svg?style=flat-square)](https://www.npmjs.com/package/@feathersjs/transport-commons)\n\n> Shared functionality for Feathers API transports like [@feathers/socketio](https://github.com/feathersjs/socketio) and [@feathersjs/primus](https://github.com/feathersjs/primus). Only intended to be used internally.\n\n## About\n\n`@feathersjs/transport-commons` contains internal shared functionality for Feathers real-time providers (currently Socket.io and Primus).\n\n`lib/client.js` is a base socket service client\n`lib/index.js` returns a configurable function and requires the following options:\n\n- `done` - A Promise that resolves once the real-time protocol server has been set up\n- `emit` - The name of the method to emit data to a socket (`'emit'` for Socket.io and `'send'` for Primus)\n- `socketKey` - A string or ES6 Symbol which stores the actual socket connection\n- `getParams` - A function that returns the Feathers connection options for a socket\n\n## Channels\n\nChannels provide channel functionality for bi-directional Feathers service providers. It is e.g. used by the Socket.io and Primus provider to quickly determine what messages to send to connected clients.\n\n```\nconst channels = require('@feathersjs/transport-commons/lib/channels');\n```\n\n## Documentation\n\n### `app.channel(... names)`\n\nReturns a named or combined channel object.\n\n```js\nconst channel = app.channel('test'); // return a `test` channel\n\nchannel.join(connection); // join a channel\nchannel.leave(connection); // leave a channel\n\nchannel.filter(connection => {}) // return a new channel with filtered connections\nchannel.length // return the number of connections\nchannel.connections // all connections in this channel\n\nconst combined = app.channel('test', 'other'); // return a combined channel\n\ncombined.join(connection); // join the `test` and `other` channel\ncombined.leave(connection); // leave the `test` and `other` channel\n\nchannel.filter(connection => {}) // return a new channel with filtered connections (connections will only be iterated once)\ncombined.length // return the number of connections\ncombined.connections // all connections in the combined channel (if a connection is in multiple channels it will only show once)\n```\n\n### `app.service('servicename').publish(event, callback)`, `app.service('servicename').publish(callback)`\n\nRegister a publishing callback for a service and event (or all events) that returns a (named or combined) channel.\n\n```js\napp.use('/test', {\n  create(data) {\n    return Promise.resolve(data);\n  }\n});\n\n// `created` event for the `test` service\napp.service('test').publish('created', (data, hook) =>\n  app.channel('*')\n);\n\n// `created` event for the `test` service, sending different data to two different channels\napp.service('test').publish('created', (data, hook) => {\n  return [\n    app.channel('admins'),\n    app.channel('users').send(_.omit(data, 'groups', 'email'))\n  ];\n});\n\n// All events for all services\napp.publish((data, hook) =>\n  app.channel('*')\n);\n\n// All `created` events for all services\napp.publish('created', (data, hook) =>\n  app.channel('*')\n);\n\n// All events for `test` service\napp.service('test').publish((data, hook) =>\n  app.channel('*')\n);\n```\n\n### `app.on('publish', function(event, channel, hook) {})`\n\nAn event that will be sent every time a service event that has connections to publish to happens. `channel` is a combined channel with all connections to publish the event to.\n\n> _Note:_ If there are no channels or connections the `publish` event will not be sent.\n\n```js\napp.on('publish', (event, channel, hook) => {\n  channel.connections.forEach(connection => {\n    // Do something with `connection`\n  });\n});\n```\n\n## License\n\nCopyright (c) 2018\n\nLicensed under the [MIT license](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/feathersjs/transport-commons.git"
  },
  "scripts": {
    "changelog": "github_changelog_generator && git add CHANGELOG.md && git commit -am \"Updating changelog\"",
    "coverage": "istanbul cover node_modules/mocha/bin/_mocha -- --opts mocha.opts",
    "lint": "semistandard --fix",
    "mocha": "mocha --opts mocha.opts",
    "publish": "git push origin --tags && npm run changelog && git push origin",
    "release:major": "npm version major && npm publish --access public",
    "release:minor": "npm version minor && npm publish --access public",
    "release:patch": "npm version patch && npm publish --access public",
    "release:pre": "npm version prerelease && npm publish --tag pre --access public",
    "test": "npm run lint && npm run coverage"
  },
  "semistandard": {
    "env": [
      "mocha"
    ]
  },
  "version": "4.0.0"
}
